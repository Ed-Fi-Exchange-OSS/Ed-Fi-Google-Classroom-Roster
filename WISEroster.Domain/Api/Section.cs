// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace WISEroster.Domain.Api
{

    // Section
    ///<summary>
    /// This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public partial class Section
    {

        ///<summary>
        /// The local code assigned by the School that identifies the course offering provided for the instruction of students.
        ///</summary>
        public string LocalCourseCode { get; set; } // LocalCourseCode (Primary key) (length: 60)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// The identifier for the school year.
        ///</summary>
        public short SchoolYear { get; set; } // SchoolYear (Primary key)

        ///<summary>
        /// The local identifier assigned to a section.
        ///</summary>
        public string SectionIdentifier { get; set; } // SectionIdentifier (Primary key) (length: 255)

        ///<summary>
        /// The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).
        ///</summary>
        public string SessionName { get; set; } // SessionName (Primary key) (length: 60)

        ///<summary>
        /// When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.
        ///</summary>
        public int? SequenceOfCourse { get; set; } // SequenceOfCourse

        ///<summary>
        /// The setting in which a child receives education and related services; for example:
        ///         Center-based instruction
        ///         Home-based instruction
        ///         Hospital class
        ///         Mainstream
        ///         Residential care and treatment facility
        ///         ...
        ///</summary>
        public int? EducationalEnvironmentDescriptorId { get; set; } // EducationalEnvironmentDescriptorId

        ///<summary>
        /// The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:
        ///         Technology-based instruction in classroom
        ///         Correspondence instruction
        ///         Face-to-face instruction
        ///         Virtual/On-line Distance learning
        ///         Center-based instruction
        ///         ...
        ///</summary>
        public int? MediumOfInstructionDescriptorId { get; set; } // MediumOfInstructionDescriptorId

        ///<summary>
        /// The type of students the Section is offered and tailored to; for example:
        ///         Bilingual students
        ///         Remedial education students
        ///         Gifted and talented students
        ///         Career and Technical Education students
        ///         Special education students
        ///         ...
        ///</summary>
        public int? PopulationServedDescriptorId { get; set; } // PopulationServedDescriptorId

        ///<summary>
        /// The value of credits or units of value awarded for the completion of a course.
        ///</summary>
        public decimal? AvailableCredits { get; set; } // AvailableCredits

        ///<summary>
        /// The type of credits or units of value awarded for the completion of a course.
        ///</summary>
        public int? AvailableCreditTypeDescriptorId { get; set; } // AvailableCreditTypeDescriptorId

        ///<summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        ///</summary>
        public decimal? AvailableCreditConversion { get; set; } // AvailableCreditConversion

        ///<summary>
        /// The primary language of instruction, if omitted English is assumed.
        ///</summary>
        public int? InstructionLanguageDescriptorId { get; set; } // InstructionLanguageDescriptorId

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int? LocationSchoolId { get; set; } // LocationSchoolId

        ///<summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        ///</summary>
        public string LocationClassroomIdentificationCode { get; set; } // LocationClassroomIdentificationCode (length: 60)

        ///<summary>
        /// Indicator of whether this section is used for official daily attendance. Alternatively, official daily attendance may be tied to a Class Period.
        ///</summary>
        public bool? OfficialAttendancePeriod { get; set; } // OfficialAttendancePeriod

        ///<summary>
        /// A locally-defined name for the section, generally created to make the section more recognizable in informal contexts and generally distinct from the SectionIdentifier.
        ///</summary>
        public string SectionName { get; set; } // SectionName (length: 100)
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id
        public long ChangeVersion { get; set; } // ChangeVersion

        // Reverse navigation

        /// <summary>
        /// Child StaffSectionAssociations where [StaffSectionAssociation].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_StaffSectionAssociation_Section)
        /// </summary>
        public System.Collections.Generic.ICollection<StaffSectionAssociation> StaffSectionAssociations { get; set; } // StaffSectionAssociation.FK_StaffSectionAssociation_Section
        /// <summary>
        /// Child StudentSectionAssociations where [StudentSectionAssociation].([LocalCourseCode], [SchoolId], [SchoolYear], [SectionIdentifier], [SessionName]) point to this entity (FK_StudentSectionAssociation_Section)
        /// </summary>
        public System.Collections.Generic.ICollection<StudentSectionAssociation> StudentSectionAssociations { get; set; } // StudentSectionAssociation.FK_StudentSectionAssociation_Section

        // Foreign keys

        /// <summary>
        /// Parent CourseOffering pointed by [Section].([LocalCourseCode], [SchoolId], [SchoolYear], [SessionName]) (FK_Section_CourseOffering)
        /// </summary>
        public CourseOffering CourseOffering { get; set; } // FK_Section_CourseOffering

        /// <summary>
        /// Parent Location pointed by [Section].([LocationClassroomIdentificationCode], [LocationSchoolId]) (FK_Section_Location)
        /// </summary>
        public Location Location { get; set; } // FK_Section_Location

        /// <summary>
        /// Parent School pointed by [Section].([LocationSchoolId]) (FK_Section_School)
        /// </summary>
        public School School { get; set; } // FK_Section_School

        public Section()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StaffSectionAssociations = new System.Collections.Generic.List<StaffSectionAssociation>();
            StudentSectionAssociations = new System.Collections.Generic.List<StudentSectionAssociation>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
