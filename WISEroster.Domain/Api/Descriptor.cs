// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace WISEroster.Domain.Api
{

    // Descriptor
    ///<summary>
    /// This is the base entity for the descriptor pattern.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public partial class Descriptor
    {

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int DescriptorId { get; set; } // DescriptorId (Primary key)

        ///<summary>
        /// A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.
        ///</summary>
        public string Namespace { get; set; } // Namespace (length: 255)

        ///<summary>
        /// A code or abbreviation that is used to refer to the descriptor.
        ///</summary>
        public string CodeValue { get; set; } // CodeValue (length: 50)

        ///<summary>
        /// A shortened description for the descriptor.
        ///</summary>
        public string ShortDescription { get; set; } // ShortDescription (length: 75)

        ///<summary>
        /// The description of the descriptor.
        ///</summary>
        public string Description { get; set; } // Description (length: 1024)

        ///<summary>
        /// A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
        ///</summary>
        public int? PriorDescriptorId { get; set; } // PriorDescriptorId

        ///<summary>
        /// The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.
        ///</summary>
        public System.DateTime? EffectiveBeginDate { get; set; } // EffectiveBeginDate

        ///<summary>
        /// The end date of the period when the descriptor is in effect.
        ///</summary>
        public System.DateTime? EffectiveEndDate { get; set; } // EffectiveEndDate
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id
        public long ChangeVersion { get; set; } // ChangeVersion

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [ElectronicMailTypeDescriptor].[ElectronicMailTypeDescriptorId] (FK_ElectronicMailTypeDescriptor_Descriptor)
        /// </summary>
        public ElectronicMailTypeDescriptor ElectronicMailTypeDescriptor { get; set; } // ElectronicMailTypeDescriptor.FK_ElectronicMailTypeDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [EntryGradeLevelReasonDescriptor].[EntryGradeLevelReasonDescriptorId] (FK_EntryGradeLevelReasonDescriptor_Descriptor)
        /// </summary>
        public EntryGradeLevelReasonDescriptor EntryGradeLevelReasonDescriptor { get; set; } // EntryGradeLevelReasonDescriptor.FK_EntryGradeLevelReasonDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [GradeLevelDescriptor].[GradeLevelDescriptorId] (FK_GradeLevelDescriptor_Descriptor)
        /// </summary>
        public GradeLevelDescriptor GradeLevelDescriptor { get; set; } // GradeLevelDescriptor.FK_GradeLevelDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [SchoolCategoryDescriptor].[SchoolCategoryDescriptorId] (FK_SchoolCategoryDescriptor_Descriptor)
        /// </summary>
        public SchoolCategoryDescriptor SchoolCategoryDescriptor { get; set; } // SchoolCategoryDescriptor.FK_SchoolCategoryDescriptor_Descriptor
        /// <summary>
        /// Parent (One-to-One) Descriptor pointed by [TermDescriptor].[TermDescriptorId] (FK_TermDescriptor_Descriptor)
        /// </summary>
        public TermDescriptor TermDescriptor { get; set; } // TermDescriptor.FK_TermDescriptor_Descriptor

        public Descriptor()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
