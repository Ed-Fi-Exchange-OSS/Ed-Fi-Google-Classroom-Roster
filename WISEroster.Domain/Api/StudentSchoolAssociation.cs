// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace WISEroster.Domain.Api
{

    // StudentSchoolAssociation
    ///<summary>
    /// This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.
    ///</summary>
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public partial class StudentSchoolAssociation
    {

        ///<summary>
        /// The month, day, and year on which an individual enters and begins to receive instructional services in a school.
        ///</summary>
        public System.DateTime EntryDate { get; set; } // EntryDate (Primary key)

        ///<summary>
        /// The identifier assigned to a school.
        ///</summary>
        public int SchoolId { get; set; } // SchoolId (Primary key)

        ///<summary>
        /// A unique alphanumeric code assigned to a student.
        ///</summary>
        public int StudentUsi { get; set; } // StudentUSI (Primary key)

        ///<summary>
        /// Indicates if a given enrollment record should be considered the primary record for a student.
        ///</summary>
        public bool? PrimarySchool { get; set; } // PrimarySchool

        ///<summary>
        /// The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.
        ///</summary>
        public int EntryGradeLevelDescriptorId { get; set; } // EntryGradeLevelDescriptorId

        ///<summary>
        /// The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.
        ///</summary>
        public int? EntryGradeLevelReasonDescriptorId { get; set; } // EntryGradeLevelReasonDescriptorId

        ///<summary>
        /// The process by which a student enters a school during a given academic session.
        ///</summary>
        public int? EntryTypeDescriptorId { get; set; } // EntryTypeDescriptorId

        ///<summary>
        /// An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.
        ///</summary>
        public bool? RepeatGradeIndicator { get; set; } // RepeatGradeIndicator

        ///<summary>
        /// Projected High School graduation year.
        ///</summary>
        public short? ClassOfSchoolYear { get; set; } // ClassOfSchoolYear

        ///<summary>
        /// An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.
        ///</summary>
        public bool? SchoolChoiceTransfer { get; set; } // SchoolChoiceTransfer

        ///<summary>
        /// The recorded exit or withdraw date for the student.
        ///</summary>
        public System.DateTime? ExitWithdrawDate { get; set; } // ExitWithdrawDate

        ///<summary>
        /// The circumstances under which the student exited from membership in an educational institution.
        ///</summary>
        public int? ExitWithdrawTypeDescriptorId { get; set; } // ExitWithdrawTypeDescriptorId

        ///<summary>
        /// An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.
        ///</summary>
        public int? ResidencyStatusDescriptorId { get; set; } // ResidencyStatusDescriptorId

        ///<summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        ///</summary>
        public int? GraduationPlanTypeDescriptorId { get; set; } // GraduationPlanTypeDescriptorId

        ///<summary>
        /// The identifier assigned to an education organization.
        ///</summary>
        public int? EducationOrganizationId { get; set; } // EducationOrganizationId

        ///<summary>
        /// The school year the student is expected to graduate.
        ///</summary>
        public short? GraduationSchoolYear { get; set; } // GraduationSchoolYear

        ///<summary>
        /// An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.
        ///</summary>
        public bool? EmployedWhileEnrolled { get; set; } // EmployedWhileEnrolled

        ///<summary>
        /// The identifier for the Calendar.
        ///</summary>
        public string CalendarCode { get; set; } // CalendarCode (length: 60)

        ///<summary>
        /// The school year associated with the student&apos;s enrollment.
        ///</summary>
        public short? SchoolYear { get; set; } // SchoolYear

        ///<summary>
        /// The full-time equivalent ratio for the studentâ€™s assignment to a school for services or instruction. For example, a full-time student would have an FTE value of 1 while a half-time student would have an FTE value of 0.5.
        ///</summary>
        public decimal? FullTimeEquivalency { get; set; } // FullTimeEquivalency

        ///<summary>
        /// Idicates whether or not a student completed the most recent school term.
        ///</summary>
        public bool? TermCompletionIndicator { get; set; } // TermCompletionIndicator
        public string Discriminator { get; set; } // Discriminator (length: 128)
        public System.DateTime CreateDate { get; set; } // CreateDate
        public System.DateTime LastModifiedDate { get; set; } // LastModifiedDate
        public System.Guid Id { get; set; } // Id
        public long ChangeVersion { get; set; } // ChangeVersion

        // Reverse navigation

        /// <summary>
        /// Child StudentSchoolAssociationEnrollmentTypes where [StudentSchoolAssociationEnrollmentType].([EntryDate], [SchoolId], [StudentUSI]) point to this entity (FK_StudentSchoolAssociationEnrollmentType_StudentSchoolAssociation)
        /// </summary>
        public System.Collections.Generic.ICollection<StudentSchoolAssociationEnrollmentType> StudentSchoolAssociationEnrollmentTypes { get; set; } // StudentSchoolAssociationEnrollmentType.FK_StudentSchoolAssociationEnrollmentType_StudentSchoolAssociation

        // Foreign keys

        /// <summary>
        /// Parent EntryGradeLevelReasonDescriptor pointed by [StudentSchoolAssociation].([EntryGradeLevelReasonDescriptorId]) (FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor)
        /// </summary>
        public EntryGradeLevelReasonDescriptor EntryGradeLevelReasonDescriptor { get; set; } // FK_StudentSchoolAssociation_EntryGradeLevelReasonDescriptor

        /// <summary>
        /// Parent GradeLevelDescriptor pointed by [StudentSchoolAssociation].([EntryGradeLevelDescriptorId]) (FK_StudentSchoolAssociation_GradeLevelDescriptor)
        /// </summary>
        public GradeLevelDescriptor GradeLevelDescriptor { get; set; } // FK_StudentSchoolAssociation_GradeLevelDescriptor

        /// <summary>
        /// Parent School pointed by [StudentSchoolAssociation].([SchoolId]) (FK_StudentSchoolAssociation_School)
        /// </summary>
        public School School { get; set; } // FK_StudentSchoolAssociation_School

        /// <summary>
        /// Parent Student pointed by [StudentSchoolAssociation].([StudentUsi]) (FK_StudentSchoolAssociation_Student)
        /// </summary>
        public Student Student { get; set; } // FK_StudentSchoolAssociation_Student

        public StudentSchoolAssociation()
        {
            CreateDate = System.DateTime.Now;
            LastModifiedDate = System.DateTime.Now;
            Id = System.Guid.NewGuid();
            StudentSchoolAssociationEnrollmentTypes = new System.Collections.Generic.List<StudentSchoolAssociationEnrollmentType>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
