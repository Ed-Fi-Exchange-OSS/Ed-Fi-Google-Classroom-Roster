// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.8
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace WISEroster.Domain.Models
{

    public partial interface IWISErosterDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<GcCourse> GcCourses { get; set; } // GcCourse
        System.Data.Entity.DbSet<GcCourseUser> GcCourseUsers { get; set; } // GcCourseUser
        System.Data.Entity.DbSet<OrgGcPreference> OrgGcPreferences { get; set; } // OrgGcPreferences
        System.Data.Entity.DbSet<ProvisioningRule> ProvisioningRules { get; set; } // ProvisioningRules
        System.Data.Entity.DbSet<ProvisioningRuleType> ProvisioningRuleTypes { get; set; } // ProvisioningRuleType
        System.Data.Entity.DbSet<RosterGradeLevel> RosterGradeLevels { get; set; } // RosterGradeLevel
        System.Data.Entity.DbSet<RosterLocalCourse> RosterLocalCourses { get; set; } // RosterLocalCourse
        System.Data.Entity.DbSet<RosterSchool> RosterSchools { get; set; } // RosterSchool
        System.Data.Entity.DbSet<SecureItem> SecureItems { get; set; } // SecureItems

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int SecureItems_Delete(string itemKey);
        // SecureItems_DeleteAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SecureItems_ReadReturnModel> SecureItems_Read(string itemKey);
        System.Collections.Generic.List<SecureItems_ReadReturnModel> SecureItems_Read(string itemKey, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SecureItems_ReadReturnModel>> SecureItems_ReadAsync(string itemKey);

        int SecureItems_Upsert(string itemKey, string itemValue);
        // SecureItems_UpsertAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

}
// </auto-generated>
